version: "3.8"

networks:
  dapr:
  traefik:
    name: "traefik"

services:

  api-gateway:
    image: traefik:v2.3
    networks:
      - traefik
    ports:
      - 80:80
      - 8080:8080 # if you enabled the dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--entrypoints.http.address=:80"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"

  pod-fake-orders:
    image: rycus86/podlike
    command: -logs -ipc=false -pull -volumes
    depends_on:
      - placement
      - pod-fake-products
    networks:
      - traefik
      - dapr
    labels:
      # sample api
      pod.component.orders-service: |
        image: br1cascio/fake-orders-service
      # dapr sidecar
      pod.component.orders-service-dapr: |
        image: daprio/daprd:edge
        command: [
          "./daprd",
          "-app-id", "orders-service",
          "-app-port", "3000",
          "-placement-host-address", "tasks.placement:50006"
        ]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./apps/fake-orders-service/index.js:/app/index.js
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=traefik"
        - "traefik.http.routers.orders-service-dapr.rule=Host(`api.0.0.0.0.sslip.io`)"
        - "traefik.http.routers.orders-service-dapr.entrypoints=http"
        - "traefik.http.middlewares.api-entrypoint.addprefix.prefix=/v1.0/invoke/orders-service/method"
        - "traefik.http.routers.orders-service-dapr.middlewares=api-entrypoint"
        - "traefik.http.services.orders-service-dapr.loadbalancer.server.port=3500"

  # pod-fake-users:
  #   image: rycus86/podlike
  #   command: -logs -ipc=false -pull -volumes
  #   depends_on:
  #     - placement
  #   networks:
  #     - dapr
  #   labels:
  #     # sample api
  #     pod.component.users-service: |
  #       image: br1cascio/fake-users-service
  #     # dapr sidecar
  #     pod.component.users-service-dapr: |
  #       image: daprio/daprd:edge
  #       command: [
  #         "./daprd",
  #         "-app-id", "users-service",
  #         "-app-port", "3000",
  #         "-placement-host-address", "tasks.placement:50006"
  #       ]
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ./apps/fake-users-service/index.js:/app/index.js

  pod-fake-products:
    image: rycus86/podlike
    command: -logs -ipc=false -pull -volumes
    depends_on:
      - placement
    networks:
      - dapr
    labels:
      # sample api
      pod.component.products-service: |
        image: br1cascio/fake-products-service
      # dapr sidecar
      pod.component.products-service-dapr: |
        image: daprio/daprd:edge
        command: [
          "./daprd",
          "-app-id", "products-service",
          "-app-port", "3000",
          "-placement-host-address", "tasks.placement:50006"
        ]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./apps/fake-products-service/index.js:/app/index.js

  placement:
    image: daprio/dapr:edge
    command: ["./placement", "-port", "50006", "-log-level", "debug"]
    networks:
      - dapr
    ports:
      - 50006:50006